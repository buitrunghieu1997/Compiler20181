package yacc;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import handler.HandleFlow;
import java_cup.sym;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\004\010\000\002\003\010" +
    "\000\002\026\010\000\002\024\003\000\002\024\002\000" +
    "\002\005\005\000\002\005\003\000\002\005\002\000\002" +
    "\006\004\000\002\006\003\000\002\007\003\000\002\010" +
    "\005\000\002\010\004\000\002\012\004\000\002\012\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\013\006\000\002\013\005\000\002\030\007\000\002\030" +
    "\007\000\002\030\007\000\002\030\010\000\002\030\010" +
    "\000\002\030\010\000\002\021\004\000\002\014\005\000" +
    "\002\023\011\000\002\023\007\000\002\023\007\000\002" +
    "\025\006\000\002\015\011\000\002\027\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\010\002\ufffe\006\ufffe\031\ufffe\001\002\000" +
    "\010\002\011\006\012\031\013\001\002\000\010\002\uffff" +
    "\006\uffff\031\uffff\001\002\000\010\002\001\006\001\031" +
    "\001\001\002\000\004\031\013\001\002\000\004\031\013" +
    "\001\002\000\004\002\000\001\002\000\004\031\ufffa\001" +
    "\002\000\020\007\uffd9\010\uffd9\011\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\001\002\000\004\007\015\001\002\000" +
    "\010\006\017\010\ufff6\013\ufff6\001\002\000\006\010\ufff7" +
    "\013\ufff7\001\002\000\010\010\ufff4\013\ufff4\031\137\001" +
    "\002\000\006\010\022\013\021\001\002\000\004\006\017" +
    "\001\002\000\004\014\024\001\002\000\010\002\ufffc\006" +
    "\ufffc\031\ufffc\001\002\000\020\004\030\006\012\015\043" +
    "\017\027\020\037\021\032\031\013\001\002\000\024\002" +
    "\ufff3\004\ufff3\006\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\031\ufff3\001\002\000\020\004\uffea\006\uffea\015" +
    "\uffea\017\uffea\020\uffea\021\uffea\031\uffea\001\002\000\004" +
    "\007\054\001\002\000\020\004\uffed\006\uffed\015\uffed\017" +
    "\uffed\020\uffed\021\uffed\031\uffed\001\002\000\020\004\uffee" +
    "\006\uffee\015\uffee\017\uffee\020\uffee\021\uffee\031\uffee\001" +
    "\002\000\004\007\054\001\002\000\020\004\uffeb\006\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\031\uffeb\001\002\000" +
    "\020\004\uffef\006\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\031\uffef\001\002\000\006\007\106\011\107\001\002\000" +
    "\020\004\030\006\012\015\105\017\027\020\037\021\032" +
    "\031\013\001\002\000\004\014\024\001\002\000\020\004" +
    "\uffe9\006\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\031\uffe9" +
    "\001\002\000\020\004\uffec\006\uffec\015\uffec\017\uffec\020" +
    "\uffec\021\uffec\031\uffec\001\002\000\004\031\013\001\002" +
    "\000\024\002\ufff1\004\ufff1\006\ufff1\015\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\031\ufff1\001\002\000\004\007\045" +
    "\001\002\000\010\006\017\010\ufff6\013\ufff6\001\002\000" +
    "\006\010\047\013\021\001\002\000\004\004\050\001\002" +
    "\000\020\004\ufffb\006\ufffb\015\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\031\ufffb\001\002\000\004\017\052\001\002\000\004" +
    "\007\053\001\002\000\004\007\054\001\002\000\004\031" +
    "\013\001\002\000\004\010\056\001\002\000\004\004\057" +
    "\001\002\000\020\004\uffda\006\uffda\015\uffda\017\uffda\020" +
    "\uffda\021\uffda\031\uffda\001\002\000\012\011\063\026\061" +
    "\027\062\030\064\001\002\000\006\011\077\031\013\001" +
    "\002\000\006\011\072\031\013\001\002\000\004\031\013" +
    "\001\002\000\004\011\065\001\002\000\004\031\013\001" +
    "\002\000\004\010\067\001\002\000\006\010\uffe1\014\uffe1" +
    "\001\002\000\004\010\071\001\002\000\006\010\uffe6\014" +
    "\uffe6\001\002\000\004\031\013\001\002\000\004\010\074" +
    "\001\002\000\006\010\uffe4\014\uffe4\001\002\000\004\010" +
    "\076\001\002\000\006\010\uffe3\014\uffe3\001\002\000\004" +
    "\031\013\001\002\000\004\010\101\001\002\000\006\010" +
    "\uffe5\014\uffe5\001\002\000\004\010\103\001\002\000\006" +
    "\010\uffe2\014\uffe2\001\002\000\020\004\ufff0\006\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\031\ufff0\001\002\000\024" +
    "\002\ufff2\004\ufff2\006\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\031\ufff2\001\002\000\012\006\017\010\ufff6" +
    "\013\ufff6\031\013\001\002\000\004\031\013\001\002\000" +
    "\004\007\111\001\002\000\010\006\017\010\ufff6\013\ufff6" +
    "\001\002\000\006\010\113\013\021\001\002\000\004\004" +
    "\114\001\002\000\020\004\uffde\006\uffde\015\uffde\017\uffde" +
    "\020\uffde\021\uffde\031\uffde\001\002\000\004\010\125\001" +
    "\002\000\004\007\122\001\002\000\006\010\120\013\021" +
    "\001\002\000\004\004\121\001\002\000\020\004\uffdd\006" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\031\uffdd\001\002" +
    "\000\010\006\017\010\ufff6\013\ufff6\001\002\000\006\010" +
    "\124\013\021\001\002\000\004\010\uffdb\001\002\000\004" +
    "\004\126\001\002\000\020\004\uffdc\006\uffdc\015\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\031\uffdc\001\002\000\004\014\024" +
    "\001\002\000\022\004\uffe7\006\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\131\031\uffe7\001\002\000\004\014\024" +
    "\001\002\000\020\004\uffe8\006\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\031\uffe8\001\002\000\020\004\uffe0\006\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\031\uffe0\001\002\000" +
    "\004\014\024\001\002\000\020\004\uffdf\006\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\031\uffdf\001\002\000\006\010" +
    "\ufff8\013\ufff8\001\002\000\006\010\ufff5\013\ufff5\001\002" +
    "\000\004\007\141\001\002\000\010\006\017\010\ufff6\013" +
    "\ufff6\001\002\000\006\010\143\013\021\001\002\000\004" +
    "\014\024\001\002\000\010\002\ufffd\006\ufffd\031\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\002\003\001\001\000\012\003\005\004" +
    "\004\024\006\027\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\137\001\001\000\004\027\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\006\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\135\001\001\000\006\007\022\010\024\001\001\000" +
    "\002\001\001\000\024\011\033\012\035\013\040\014\032" +
    "\015\025\023\030\024\041\026\037\027\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\103\013\040\014\032\015\025\023\030\024" +
    "\041\026\037\027\034\001\001\000\006\007\050\010\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\045\006\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\054\001\001\000\004\027\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\077\001\001\000\004\027\072\001" +
    "\001\000\004\027\067\001\001\000\002\001\001\000\004" +
    "\027\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\116\006\015" +
    "\025\114\027\115\001\001\000\004\027\107\001\001\000" +
    "\002\001\001\000\006\005\111\006\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\122\006\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\127\010\024\001\001\000\004\021" +
    "\131\001\001\000\006\007\132\010\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\134\010\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\141\006\015\001\001\000" +
    "\002\001\001\000\006\007\143\010\024\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Myscanner.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cprogram ::= cprogram function_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cprogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cprogram ::= cprogram function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cprogram ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cprogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= return_type variable_nt LEFTPARAN argument_list RIGHTPARAN globalblock 
            {
              Object RESULT =null;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String function_name = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parent");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_def ::= variable_nt variable_nt LEFTPARAN argument_list RIGHTPARAN globalblock 
            {
              Object RESULT =null;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String function_name = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parentdef");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inlinefunction ::= return_type variable_nt LEFTPARAN argument_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String function_name = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parent");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inlinefunction",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return_type ::= RETURNTYPE 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Return type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return_type ::= 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Empty return type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argument_list ::= argument_list COMMA argument 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Multiple argument"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argument_list ::= argument 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Single argument"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argument_list ::= 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Empty argument"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argument ::= RETURNTYPE VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argument ::= RETURNTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // globalblock ::= block 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Global Block reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalblock",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Block with Statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Empty Block"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Multiple Statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= statement 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Single Statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= function_call 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(FileStuff.isDebugMode()) System.out.println("Function: " + fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= SEMI 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Semi colon reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ifstatement 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("If statement reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= whilestatement 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("While statement reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= dowhilestatement 
            {
              Object RESULT =null;
		 System.out.println("Do while statement reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= inlinefunction 
            {
              Object RESULT =null;
		 if(FileStuff.isDebugMode()) System.out.println("Inline function reached"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifstatement ::= IF condition globalblock elsestmt 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String con = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                System.out.println("If condition is: " + con);
                HandleFlow.insertNode("ifstmt " + con + " ", "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstatement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifstatement ::= IF condition globalblock 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String con = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	            System.out.println("If condition is: " + con);
	            HandleFlow.insertNode("ifstmt " + con + " ", "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstatement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= LEFTPARAN variable_nt EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + "==" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "==" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= LEFTPARAN variable_nt LT variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + "<" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "<" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= LEFTPARAN variable_nt GT variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + ">" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + ">" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= LEFTPARAN variable_nt GT EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + ">=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + ">=" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= LEFTPARAN variable_nt LT EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + "<=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "<=" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= LEFTPARAN variable_nt EXCL EQUALS variable_nt RIGHTPARAN 
            {
              java.lang.String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String e2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e1 + "!=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "!=" + e2);
                HandleFlow.insideIf();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elsestmt ::= ELSE globalblock 
            {
              Object RESULT =null;
		 HandleFlow.insertNode("else", "function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // whilestatement ::= WHILE condition globalblock 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String con = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    System.out.println("While condition is: " + con); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_call ::= variable_nt EQUALS variable_nt LEFTPARAN argument_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                System.out.println("Function call: " + e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_call ::= variable_nt LEFTPARAN argument_list RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	            System.out.println("Function call: " + e);
	            RESULT = e;
	            HandleFlow.insertNode(e, "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_call ::= variable_nt LEFTPARAN function_call_no_semi RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                System.out.println("Function call: " + e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_call_no_semi ::= variable_nt LEFTPARAN argument_list RIGHTPARAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                System.out.println("Function call: " + e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_no_semi",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dowhilestatement ::= DO globalblock WHILE LEFTPARAN condition RIGHTPARAN SEMI 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String con = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		    System.out.println("DoWhile condition is: " + con); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dowhilestatement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_nt ::= VARIABLE 
            {
              java.lang.String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Myscanner.getLastScanned(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_nt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparator_nt ::= COMPARATOR 
            {
              java.lang.String RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String cmp = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Myscanner.getLastScanned(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparator_nt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
