import java_cup.runtime.*;

// set up và sử dụng scanner
init with {: Myscanner.init(); :}
scan with {: return getScanner().next_token(); :}

//terminal: những token được trả về bởi terminal
// specifier là typedef, extern, static, auto, register, const, volatile
terminal SEMI,SPECIFIER, RETURNTYPE, LEFTPARAN, RIGHTPARAN, EQUALS, STAR;
terminal COMMA, LEFTBRACE, RIGHTBRACE, FOR, WHILE, DO, IF, ELSE, SWITCH, BREAK, CASE;
terminal LT, GT, EXCL;
terminal java.lang.String VARIABLE, COMPARATOR;

// non-terminal: Không được trả về trong kết quả
non terminal cprogram, function_def, function, argument_list, argument, globalblock, block;
non terminal statement, statement_list, ifstatement, whilestatement, dowhilestatement;
non terminal forstatement, switchstmt, whilecondition, elsestmt, specifier_list;
non terminal function_call, return_type, function_call_no_semi, inlinefunction;
non terminal java.lang.String variable_nt, condition, comparator_nt;

// GRAMAR

// có thể khai boá prototype của hàm hoặc định nghĩa luôn hàm
cprogram ::= cprogram function_def | cprogram function | ;
// vd: int Test(int a, int b) {...}
function ::= return_type variable_nt:function_name LEFTPARAN argument_list RIGHTPARAN globalblock
             {:
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parent");
             :};
// vd: int Test(int am int b)
function_def ::= variable_nt variable_nt:function_name LEFTPARAN argument_list RIGHTPARAN globalblock
             {:
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parentdef");
             :};
  //inline int max(int a, int b) {
  //  return a > b ? a : b;
  //}
inlinefunction ::= return_type variable_nt:function_name LEFTPARAN argument_list RIGHTPARAN SEMI
             {:
                if(FileStuff.isDebugMode()) System.out.println("Function def: " + function_name);
                HandleFlow.insertNode(function_name + "#", "parent");
             :};
// có thể có kiểu trả về hoặc không
return_type ::= RETURNTYPE:t
             {: if(FileStuff.isDebugMode()) System.out.println("Return " + t); :}
             | // kkông trả về gì (void)
             {: if(FileStuff.isDebugMode()) System.out.println("Empty return " + t); :};
// có thể có 1 nhiều hoặc không có thuộc tính
argument_list ::= argument_list COMMA argument
             {: if(FileStuff.isDebugMode()) System.out.println("Multiple argument"); :}
             | argument
             {: if(FileStuff.isDebugMode()) System.out.println("Single argument"); :}
             | // không có argument
             {: if(FileStuff.isDebugMode()) System.out.println("Empty argument"); :};

//eg int a// or void
argument ::= RETURNTYPE VARIABLE | RETURNTYPE;

globalblock ::= block
             {: if(FileStuff.isDebugMode()) System.out.println("Global Block reached"); :};

// { <statements> }
block ::= LEFTBRACE statement_list RIGHTBRACE
             {: if(FileStuff.isDebugMode()) System.out.println("Block with Statement"); :}
             | LEFTBRACE RIGHTBRACE
             {: if(FileStuff.isDebugMode()) System.out.println("Empty Block"); :};

statement_list ::= statement_list statement
             {: if(FileStuff.isDebugMode()) System.out.println("Multiple Statement"); :}
             | statement
             {: if(FileStuff.isDebugMode()) System.out.println("Single Statement"); :};

statement ::= function_call:fc //print(a)
             {: if(FileStuff.isDebugMode()) System.out.println("Function: " + fc); :}
             | SEMI //;
             {: if(FileStuff.isDebugMode()) System.out.println("Semi colon reached"); :}
             | ifstatement
             {: if(FileStuff.isDebugMode()) System.out.println("If statement reached"); :}
             | whilestatement
             {: if(FileStuff.isDebugMode()) System.out.println("While statement reached"); :}
             | dowhilestatement
             {: System.out.println("Do while statement reached"); :}
             | inlinefunction
             {: if(FileStuff.isDebugMode()) System.out.println("Inline function reached"); :};

ifstatement ::= IF condition:con globalblock elsestmt
             {:
                System.out.println("If condition is: " + con);
                HandleFlow.insertNode("ifstmt " + con + " ", "function");
             :}
             | IF condition:con globalblock
             {:
	            System.out.println("If condition is: " + con);
	            HandleFlow.insertNode("ifstmt " + con + " ", "function");
             :};

condition ::= LEFTPARAN variable_nt:e1 EQUALS variable_nt:e2 RIGHTPARAN //x == y
             {:
                RESULT = e1 + "==" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "==" + e2);
                HandleFlow.insideIf();
             :}
             | LEFTPARAN variable_nt:e1 LT variable_nt:e2 RIGHTPARAN //x < y
             {:
                RESULT = e1 + "<" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "<" + e2);
                HandleFlow.insideIf();
             :}
             | LEFTPARAN variable_nt:e1 GT variable_nt:e2 RIGHTPARAN //x > y
             {:
                RESULT = e1 + ">" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + ">" + e2);
                HandleFlow.insideIf();
             :}
             | LEFTPARAN variable_nt:e1 GT EQUALS variable_nt:e2 RIGHTPARAN //x >= y
             {:
                RESULT = e1 + ">=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + ">=" + e2);
                HandleFlow.insideIf();
             :}
             | LEFTPARAN variable_nt:e1 LT EQUALS variable_nt:e2 RIGHTPARAN //x <= y
             {:
                RESULT = e1 + "<=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "<=" + e2);
                HandleFlow.insideIf();
             :}
             | LEFTPARAN variable_nt:e1 EXCL EQUALS variable_nt:e2 RIGHTPARAN //x != y
             {:
                RESULT = e1 + "!=" + e2;
                if(FileStuff.isDebugMode()) System.out.println("Condition: " + e1 + "!=" + e2);
                HandleFlow.insideIf();
             :};

elsestmt ::= ELSE globalblock
             {: HandleFlow.insertNode("else", "function"); :};

whilestatement ::= WHILE condition:con globalblock
             {:    System.out.println("While condition is: " + con); :};

function_call ::= variable_nt EQUALS variable_nt:e LEFTPARAN argument_list RIGHTPARAN SEMI // x = print(a,b);
             {:
                System.out.println("Function call: " = e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             :}
             | variable_nt:e LEFTPARAN argument_list RIGHTPARAN SEMI // print(a, b);
             {:
	            System.out.println("Function call: " = e);
	            RESULT = e;
	            HandleFlow.insertNode(e, "function");
             :}
             // check again the {: :} to remove or not
             | variable_nt:e LEFTPARAN function_call_no_semi RIGHTPARAN SEMI //print(getValue(b))
             {:
                System.out.println("Function call: " = e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             :};

function_call_no_semi ::= variable_nt:e LEFTPARAN argument_list RIGHTPARAN // do(int a, int b)
             {:
                System.out.println("Function call: " = e);
                RESULT = e;
                HandleFlow.insertNode(e, "function");
             :};

dowhilestatement ::= DO globalblock WHILE LEFTPARAN condition:con RIGHTPARAN SEMI
             {:    System.out.println("DoWhile condition is: " + con); :};

variable_nt ::= VARIABLE:e
             {: RESULT = Myscanner.getLastScanned(); :};

comparator_nt ::= COMPARATOR:cmp
             {: RESULT = Myscanner.getLastScanned(); :};